fowler_nordheim_emitter
{
  This input file is used to demonstrate the Fowler-Nordheim field
  emission model implemented in OOPIC.  This input file was adapted
  on October 5, 2002 from the ~/input/voltest.inp input file by
  David Bruhwiler.

  A DC potential difference is generated across a gap in Cartesian
  geometry.

  Particles are emitted from a portion of the upper boundary,
  according to the Fowler-Nordheim field emission model.

  Diagnostics of how much energy they have upon arrival at the
  far wall are kept.

  An electrostatic field solve is used.
}

Variables
{
  numCellsX = 100        // # of cells along horizontal axis
  numCellsY =  20        // # of cells along vertical   axis

  xMaxMKS = 10.          // length of horizontal axis in meters
  yMaxMKS = 1.0          // length of vertical   axis in meters

  numEmitterCells = 10   // # of cells along the emitting surface
}

Region
{

Grid
{
  J   = numCellsX       // number of grids in x
  x1s = 0.0
  x1f = xMaxMKS
  n1  = 1.0

  K   = numCellsY       // number of grids in y
  x2s = 0.0
  x2f = yMaxMKS
  n2  = 1.0

  Geometry = 1          // specify Cartesian geometry
}
Species
{
  name = electrons      // name is used below for emitter
  m = 9.11E-31          // electron mass in KG
  q = -1.6e-19          // electron charge in C
}

Control
{
  dt = 1e-9              // the time step in s
  ElectrostaticFlag = 1  // specify use of the electrostatic field solve
}

// The top boundary is an equipotential surface.
Equipotential
{
  j1 = 0
  j2 = numCellsX
  k1 = numCellsY
  k2 = numCellsY
  normal = -1

  C = -1.e5              // specified potential in V
}

// The middle portion of the top boundary is also specified to be a
//   surface that emits electrons via the Fowler-Nordheim field
//   emission model.
//
// Below, we specify all of the Fowler-Nordheim parameters that are
//   specific to this type of particle emitter, even though most of
//   them are given the default value.
//
FowlerNordheimEmitter
{
  j1 = (numCellsX - numEmitterCells) / 2
  j2 = (numCellsX + numEmitterCells) / 2
  k1 = numCellsY
  k2 = numCellsY
  normal = -1

  speciesName = electrons  // name from species group above
  np2c = 5.e+6             // numerical weight of emitted particles

  // Coefficient "A" of the Fowler-Nordheim field emission model.
  // The default value is 1.5414e-06, which is specified here.
  A_FN = 1.5414e-06

  // Coefficient "beta" of the Fowler-Nordheim field emission model.
  // This simply multiplies the electric field from the simulation.
  // The default value is 1.  Here, we specify beta_FN = 20000, which
  //    yields non-zero field emission, without having large electric
  //    fields.
  beta_FN = 20000.

  // Coefficient "B" of the Fowler-Nordheim field emission model.
  // The default value is 6.8308e+09, which is specified here.
  B_FN = 6.8308e+09

  // Coefficient "C_v" of the Fowler-Nordheim field emission model.
  // The default value is 0, which is specified here.
  C_v_FN = 0.

  // Coefficient "C_y" of the Fowler-Nordheim field emission model.
  // The default value is 3.79e-05, which is specified here.
  C_y_FN = 3.79e-05

  // The work function "Phi_w" for electrons in the surface, in eV.
  // The default value is 4 eV, which is specified here.
  Phi_w_FN = 4.

  // The number of intervals to be used for emitting particles.
  // The default value of 0, which is specified here.
  // In the default case, nIntervals will be reset to the # of cells
  //   along the emitting boundary (with a minimum of 2), which  is
  //   the most reasonable thing to do.
  nIntervals = 0
}

// The bottom boundary is a perfect conductor.
// We further specify that some energy diagnostics should be collected
//   for particles that strike this boundary.
Conductor
{
  name = collector
  j1 = 0
  j2 = numCellsX
  k1 = 0
  k2 = 0

  IdiagFlag = 1          // Turn on energy and current diagnostics
  nxbins = 2.*numCellsX  // resolution of position diagnostic

  nenergybins = 40       // resolution of the energy diagnostic
  energy_min  = 82000    // in eV
  energy_max  = 102000   // in eV
}

// The left boundary is a simple dielectric
Dielectric
{
  j1 = 0
  j2 = 0
  k1 = 0
  k2 = numCellsY
}

// The right boundary is a simple dielectric
Dielectric
{
  j1 = numCellsX
  j2 = numCellsX
  k1 = 0
  k2 = numCellsY
  normal = -1
}
}

